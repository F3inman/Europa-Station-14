// SPDX-FileCopyrightText: 2022 DrSmugleaf <DrSmugleaf@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 Illiux <newoutlook@gmail.com>
// SPDX-FileCopyrightText: 2022 Jezithyr <Jezithyr.@gmail.com>
// SPDX-FileCopyrightText: 2022 Jezithyr <Jezithyr@gmail.com>
// SPDX-FileCopyrightText: 2022 Jezithyr <jmaster9999@gmail.com>
// SPDX-FileCopyrightText: 2022 Júlio César Ueti <52474532+Mirino97@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 Paul Ritter <ritter.paul1@googlemail.com>
// SPDX-FileCopyrightText: 2022 Visne <39844191+Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 mirrorcult <lunarautomaton6@gmail.com>
// SPDX-FileCopyrightText: 2022 wrexbe <81056464+wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 wrexbe <wrexbe@protonmail.com>
// SPDX-FileCopyrightText: 2024 Crotalus <Crotalus@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 deltanedas <39013340+deltanedas@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 deltanedas <@deltanedas:kde.org>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using System.Linq;
using Content.Shared._Europa.Antag;
using Content.Shared.Ghost;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
/* // Europa-Remove
        private List<(string, NetEntity)> _warps = new();
*/
        private string _searchText = string.Empty;

        // Europa-Start
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

        private List<GhostWarpPlayer> _originalPlayerWarps = new();
        private List<GhostWarpPlace> _originalPlaceWarps = new();
        private List<GhostWarpGlobalAntagonist> _originalAntagonists = new();

        private List<GhostWarpPlayer> _playerWarps = new();
        private List<GhostWarpPlace> _placeWarps = new();
        private List<GhostWarpGlobalAntagonist> _globalAntagonists = new();

        private List<GhostWarpPlayer> _alivePlayers = new();
        private List<GhostWarpPlayer> _leftPlayers = new();
        private List<GhostWarpPlayer> _deadPlayers = new();
        private List<GhostWarpPlayer> _ghostPlayers = new();
        // Europa-End

        public event Action<NetEntity>? WarpClicked;
        public event Action? OnGhostnadoClicked;

        public GhostTargetWindow()
        {
            IoCManager.InjectDependencies(this); // Europa
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;

            GhostnadoButton.OnPressed += _ => OnGhostnadoClicked?.Invoke();
        }

        public void Populate() // Europa-Edit | UpdateWarps > Populate
        {
/* // Europa-Remove
            // Server COULD send these sorted but how about we just use the client to do it instead
            _warps = warps
                .OrderBy(w => w.IsWarpPoint)
                .ThenBy(w => w.DisplayName, Comparer<string>.Create(
                    (x, y) => string.Compare(x, y, StringComparison.Ordinal)))
                .Select(w =>
                {
                    var name = w.IsWarpPoint
                        ? Loc.GetString("ghost-target-window-current-button", ("name", w.DisplayName))
                        : w.DisplayName;

                    return (name, w.Entity);
                })
                .ToList();
*/
            // Europa-Start
            GhostTeleportContainer.DisposeAllChildren();

            _playerWarps = _originalPlayerWarps;
            _placeWarps = _originalPlaceWarps;
            _globalAntagonists = _originalAntagonists;

            PlayersAllocation();
            AddButtons();
            // Europa-End
        }

        public void UpdateWarps(List<GhostWarpPlayer> players, List<GhostWarpPlace> places, List<GhostWarpGlobalAntagonist> antagonists) // Europa-Edit | Populate > UpdateWarps
        {
/* // Europa-Remove
            ButtonContainer.DisposeAllChildren();
            AddButtons();
*/
            // Europa-Start
            _originalPlayerWarps = players.ToList();
            _originalPlaceWarps = places.ToList();
            _originalAntagonists = antagonists.ToList();

            _playerWarps = _originalPlayerWarps;
            _placeWarps = _originalPlaceWarps;
            _globalAntagonists = _originalAntagonists;

            Populate();
            // Europa-End
        }

        private void AddButtons()
        {
/* // Europa-Remove
            foreach (var (name, warpTarget) in _warps)
            {
                var currentButtonRef = new Button
                {
                    Text = name,
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    MinSize = new Vector2(340, 20),
                    ClipText = true,
                };

                currentButtonRef.OnPressed += _ => WarpClicked?.Invoke(warpTarget);
                currentButtonRef.Visible = ButtonIsVisible(currentButtonRef);

                ButtonContainer.AddChild(currentButtonRef);
            }
*/

            // Europa-Start
            AddAntagButtons(_globalAntagonists, "ghost-teleport-menu-antagonists-label", "ButtonColorAntagonistDepartment");
            AddPlayerButtons(_alivePlayers, "ghost-teleport-menu-alive-label", string.Empty, true); // Alive
            AddPlayerButtons(_ghostPlayers, "ghost-teleport-menu-ghosts-label", string.Empty, true); // Ghost
            AddPlayerButtons(_leftPlayers, "ghost-teleport-menu-left-label", string.Empty, true); // Left
            AddPlayerButtons(_deadPlayers, "ghost-teleport-menu-dead-label", string.Empty, true); // Dead
            AddPlaceButtons(_placeWarps, "ghost-teleport-menu-locations-label", "ButtonColorSpecificDepartment");
            // Europa-End
        }

/* // Europa-Remove | Part of search bar
        private bool ButtonIsVisible(Button button)
        {
            return string.IsNullOrEmpty(_searchText) || button.Text == null || button.Text.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
        }

        private void UpdateVisibleButtons()
        {
            foreach (var child in ButtonContainer.Children)
            {
                if (child is Button button)
                    button.Visible = ButtonIsVisible(button);
            }
        }
*/

        // Europa-Start
        private void AddPlayerButtons(List<GhostWarpPlayer> players, string text, string styleClass,
            bool enableByDepartmentColorSheet)
        {
            if (players.Count == 0)
                return;

            var bigGrid = new GridContainer();

            var bigLabel = new Label
            {
                Text = Loc.GetString(text),
                StyleClasses = { "LabelBig" }
            };
            bigGrid.AddChild(bigLabel);

            var sortedPlayers = SortPlayersByDepartment(players);

            foreach (var departmentList in sortedPlayers)
            {
                if (departmentList.Count == 0)
                    continue;

                var departmentGrid = new GridContainer
                {
                    Columns = 5
                };

                var departmentPrototype = _prototypeManager.Index<DepartmentPrototype>(departmentList[0].DepartmentID);
                if (enableByDepartmentColorSheet)
                    styleClass = departmentPrototype.ButtonStyle;

                var labelText = departmentPrototype.Name;

                var departmentLabel = new Label
                {
                    Text = Loc.GetString(labelText) + ": " + departmentList.Count,
                    StyleClasses = { "LabelSecondaryColor" }
                };

                foreach (var player in departmentList)
                {
                    var playerButton = new Button
                    {
                        Text = player.Name,
                        TextAlign = Label.AlignMode.Right,
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        SizeFlagsStretchRatio = 1,
                        StyleClasses = { styleClass },
                        ToolTip = player.JobName,
                        TooltipDelay = 0.1f,
                        SetWidth = 180,
                    };

                    playerButton.OnPressed += _ => WarpClicked?.Invoke(player.Entity);

                    departmentGrid.AddChild(playerButton);
                }

                bigGrid.AddChild(departmentLabel);
                bigGrid.AddChild(departmentGrid);
            }

            GhostTeleportContainer.AddChild(bigGrid);
        }

        private void AddPlaceButtons(List<GhostWarpPlace> places, string text, string styleClass)
        {
            if (places.Count == 0)
                return;

            var bigGrid = new GridContainer();

            var bigLabel = new Label
            {
                Text = Loc.GetString(text),
                StyleClasses = { "LabelBig" }
            };
            bigGrid.AddChild(bigLabel);

            var placesGrid = new GridContainer
            {
                Columns = 5,
            };

            var countLabel = new Label
            {
                Text = Loc.GetString("ghost-teleport-menu-count-label") + ": " + places.Count,
                StyleClasses = { "LabelSecondaryColor" }
            };

            foreach (var place in places)
            {
                var placeButton = new Button
                {
                    Text = place.Name,
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    StyleClasses = { styleClass },
                    ToolTip = place.Description,
                    TooltipDelay = 0.1f,
                    SetWidth = 180,
                };

                placeButton.OnPressed += _ => WarpClicked?.Invoke(place.Entity);

                placesGrid.AddChild(placeButton);
            }

            bigGrid.AddChild(countLabel);
            bigGrid.AddChild(placesGrid);

            GhostTeleportContainer.AddChild(bigGrid);
        }
        // Europa-End

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            // Europa-Edit-Start
            _searchText = args.Text.ToLower();

            GhostTeleportContainer.DisposeAllChildren();

            if (string.IsNullOrEmpty(_searchText))
            {
                _playerWarps = _originalPlayerWarps;
                _placeWarps = _originalPlaceWarps;
                _globalAntagonists = _originalAntagonists;
            }
            else
            {
                _playerWarps = GetSortedPlayers(_originalPlayerWarps).Where(p => p.Name.ToLower().Contains(_searchText)).ToList();
                _placeWarps = GetSortedPlaces(_originalPlaceWarps).Where(p => p.Name.ToLower().Contains(_searchText)).ToList();
                _globalAntagonists = GetSortedAntagonists(_originalAntagonists).Where(a => a.Name.ToLower().Contains(_searchText)).ToList();
            }
            PlayersAllocation();

            AddButtons();
            // Europa-Edit-End
        }

        // Europa-Start
        private void AddAntagButtons(List<GhostWarpGlobalAntagonist> antags, string text, string styleClass)
        {
            if (antags.Count == 0)
                return;

            var bigGrid = new GridContainer();

            var bigLabel = new Label
            {
                Text = Loc.GetString(text),
                StyleClasses = { "LabelBig" }
            };
            bigGrid.AddChild(bigLabel);

            var sortedAntags = SortAntagsByWeight(antags);

            foreach (var antagList in sortedAntags)
            {
                if (antagList.Count == 0)
                    continue;

                var departmentGrid = new GridContainer
                {
                    Columns = 5
                };

                var labelText = antagList[0].AntagonistName;

                foreach (var antag in antagList)
                {
                    var playerButton = new Button
                    {
                        Text = antag.Name,
                        TextAlign = Label.AlignMode.Right,
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        SizeFlagsStretchRatio = 1,
                        StyleClasses = { styleClass },
                        ToolTip = Loc.GetString(antag.AntagonistDescription),
                        TooltipDelay = 0.1f,
                        SetWidth = 180,
                    };

                    playerButton.OnPressed += _ => WarpClicked?.Invoke(antag.Entity);

                    departmentGrid.AddChild(playerButton);
                }

                var departmentLabel = new Label
                {
                    Text = Loc.GetString(labelText) + $": {antagList.Count}",
                    StyleClasses = { "LabelSecondaryColor" }
                };

                bigGrid.AddChild(departmentLabel);
                bigGrid.AddChild(departmentGrid);
            }

            GhostTeleportContainer.AddChild(bigGrid);
        }

        public List<List<GhostWarpPlayer>> SortPlayersByDepartment(List<GhostWarpPlayer> players)
        {
            if (players.Count == 0)
                return new List<List<GhostWarpPlayer>>();

            return players
                .GroupBy(p => _prototypeManager.Index<DepartmentPrototype>(p.DepartmentID).Weight)
                .OrderByDescending(g => g.Key)
                .Select(g => g.ToList())
                .ToList();
        }

        public List<List<GhostWarpGlobalAntagonist>> SortAntagsByWeight(List<GhostWarpGlobalAntagonist> antagonists)
        {
            if (antagonists.Count == 0)
                return new List<List<GhostWarpGlobalAntagonist>>();

            return antagonists
                .GroupBy(a => _prototypeManager.Index<AntagonistPrototype>(a.PrototypeID).Weight)
                .OrderBy(g => g.Key)
                .Select(g => g.ToList())
                .ToList();
        }

        private List<GhostWarpPlace> GetSortedPlaces(List<GhostWarpPlace> places)
        {
            return places
                .OrderBy(w => w.Name)
                .ToList();
        }

        private List<GhostWarpPlayer> GetSortedPlayers(List<GhostWarpPlayer> players)
        {
            return players
                .OrderBy(w => w.Name)
                .ToList();
        }

        private List<GhostWarpGlobalAntagonist> GetSortedAntagonists(List<GhostWarpGlobalAntagonist> antagonists)
        {
            return antagonists
                .OrderBy(w => w.Name)
                .ToList();
        }

        private void PlayersAllocation()
        {
            _alivePlayers = _playerWarps.Where(warp => warp.IsAlive).ToList();
            _deadPlayers = _playerWarps.Where(warp => warp.IsDead).ToList();
            _leftPlayers = _playerWarps.Where(warp => warp.IsLeft).ToList();
            _ghostPlayers = _playerWarps.Where(warp => warp.IsGhost).ToList();
        }
        // Europa-End
    }
}
